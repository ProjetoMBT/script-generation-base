<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coc.Data.Wp</name>
    </assembly>
    <members>
        <member name="M:Coc.Data.Wpartial.Wp.ConcatenateSequencesRandWStates(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},Coc.Modeling.FiniteStateMachine.FiniteStateMachine,System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            concatena as sequencia R com as sequencia W de cada estado.
            </summary>
            <param name="ListSequenceR"></param>
            <param name="fsm"></param>
            <param name="rw"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.MachineWalkthrough(System.Collections.Generic.List{System.String},Coc.Modeling.FiniteStateMachine.FiniteStateMachine,System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            metodo que caminha sobre a maquina com as sequencias R
            </summary>
            <param name="seqLine"></param>
            <param name="fsm"></param>
            <param name="rw"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.TransitionCoverLessStateCover(Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            método retorna a diferença entre os conj StateCover e conj TransitionCover.
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.SequenceTransitionCover(Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            metodo que retorna uma lista de sequencia utilizando transitionCover.
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.concatenatesSequenceStateCoverAndWMachine(Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            metodo que concatena as sequencia do StateCover com as sequencia W da máquina.
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.ConcatenateSequences(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            metodo que recebe duas lista de sequencia e concatena
            </summary>
            <param name="listStateCover"></param>
            <param name="listFsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.CopyList(System.Collections.Generic.List{System.String})">
            <summary>
            metodo para criar uma copia de uma lista.
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetSequenceStateCover(Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            metodo que gera as sequencia do STATECOVER
            </summary>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.SetWMachine(Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            Este método obtem uma lista de pares de estado e uma lista com elementos do conjunto W.
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.RemoveEqualsSequence(Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            método que remove sequencia repitidas do conjunto W da Máquina
            </summary>
            <param name="fsm"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.removePreFixed(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            remove duplicate String
            </summary>
            <param name="rw"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetWiStatePair(Coc.Data.Wpartial.StatePair,Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            método que popula a lista de SetW da FSM com conjunto W.
            </summary>
            <param name="statePair"></param>
            <param name="fsm"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetListOutoutStatePair(System.Collections.Generic.List{System.String},Coc.Data.Wpartial.StatePair,Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            metodo recursivo que obtem uma lista de entradas onde 
            obtem o conjunto W da FSM.
            </summary>
            <param name="listSeq"></param>
            <param name="statePair"></param>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetInputEquals(Coc.Modeling.FiniteStateMachine.State,Coc.Modeling.FiniteStateMachine.State)">
            <summary>
            metodo que verifica se as entradas da transição onde o estados passado por parament
            são iguais.
            </summary>
            <param name="si"></param>
            <param name="sj"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetListTransitionOutputOfState(Coc.Data.Wpartial.StatePair,Coc.Modeling.FiniteStateMachine.FiniteStateMachine)">
            <summary>
            método que retorna todas as transição onde os pares de estados são
            origem na transição na lista de de transição da FSM.
            </summary>
            <param name="statePair"></param>
            <param name="fsm"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.removeEqualsState(System.Collections.Generic.List{Coc.Data.Wpartial.StatePair})">
            <summary>
            remove os pares de estados iguais.
            </summary>
            <param name="listStatePair"></param>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.IsEquals(Coc.Data.Wpartial.StatePair,Coc.Data.Wpartial.StatePair)">
            <summary>
            método que verifica se os pares de estados são iguais.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetTransitionStateSource(Coc.Modeling.FiniteStateMachine.State,System.Collections.Generic.List{Coc.Modeling.FiniteStateMachine.Transition})">
            <summary>
            metodo que retorna uma lista de transição 
            da FSM onde o estado passado por parametro e orgim na transição.
            </summary>
            <param name="s1"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetTransitionStateSource(Coc.Modeling.FiniteStateMachine.State,System.String,System.Collections.Generic.List{Coc.Modeling.FiniteStateMachine.Transition})">
            <summary>
            método que retona uma lista de transição onde
            o estado  for igual ao estado de origem na transição
            e o input for igual ao input da transição.
            
            </summary>
            <param name="s1"></param>
            <param name="input"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.Preambulo(Coc.Modeling.FiniteStateMachine.State)">
            <summary>
            Shortcut for StateCover(State s, List-of-State visited) method.
            </summary>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.StateCover(Coc.Modeling.FiniteStateMachine.State,System.Collections.Generic.List{Coc.Modeling.FiniteStateMachine.State})">
            <summary>
            Gets a preamble of a given state S.
            </summary>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.TransitionCover(Coc.Modeling.FiniteStateMachine.State)">
            <summary>
            Gets the transitio cover of given state S.
            </summary>
        </member>
        <member name="M:Coc.Data.Wpartial.Wp.GetAllowedInputs(Coc.Modeling.FiniteStateMachine.State)">
            <summary>
            Gets the allowed inputs list of a given state S.
            </summary>
        </member>
    </members>
</doc>
