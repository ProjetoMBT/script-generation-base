/* The following code was generated by JFlex 1.4.3 on 3/24/15 4:49 PM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/24/15 4:49 PM from the specification file
 * <tt>oatsl.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRINGSTATE = 4;
  public static final int IMPORTSTATE = 6;
  public static final int JAVADOCSTATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  3,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 35,  0,  0,  0,  0,  0, 29, 29, 31,  0, 29,  0, 29, 34, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32,  0, 30,  0,  0,  0,  0, 
    20, 33, 27, 33, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 
    33, 33, 33, 21, 33, 33, 33, 33, 33, 33, 33,  0,  0,  0,  0,  0, 
     0, 14, 11, 13, 19, 16, 33, 26, 23,  4, 33, 25, 12,  5, 18,  7, 
     6, 33,  8, 15,  9, 10, 22, 24, 17, 33, 33, 29,  0, 29,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\11\5\1\3\2\5"+
    "\1\6\1\7\1\3\1\10\3\1\2\4\1\11\1\2"+
    "\1\4\16\5\1\0\3\5\1\0\1\12\1\4\20\5"+
    "\1\0\2\5\1\13\1\14\11\5\1\15\6\5\1\0"+
    "\1\16\2\5\1\17\2\5\1\20\5\5\1\21\4\5"+
    "\1\0\1\5\1\22\1\23\1\5\1\24\1\5\1\25"+
    "\1\5\1\26\4\5\1\0\1\27\1\30\1\31\2\5"+
    "\1\32\1\33\1\34\1\0\2\5\1\0\1\35\1\5"+
    "\1\0\1\5\1\0\1\36\3\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\220\0\u02ac\0\u02d0\0\220\0\220"+
    "\0\u02f4\0\u0318\0\u033c\0\u0360\0\220\0\u0384\0\220\0\u03a8"+
    "\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8"+
    "\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8"+
    "\0\u060c\0\u0630\0\220\0\u0318\0\u0654\0\u0678\0\u069c\0\u06c0"+
    "\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0"+
    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0120"+
    "\0\220\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8"+
    "\0\u09fc\0\u0a20\0\u0120\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0120\0\u0b40\0\u0b64\0\u0120\0\u0b88\0\u0bac"+
    "\0\u0120\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0120\0\u0c84"+
    "\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0120\0\u0120\0\u0d5c"+
    "\0\u0120\0\u0d80\0\u0120\0\u0da4\0\u0120\0\u0dc8\0\u0dec\0\u0e10"+
    "\0\u0e34\0\u0e58\0\u0120\0\u0120\0\u0120\0\u0e7c\0\u0ea0\0\u0120"+
    "\0\u0120\0\u0120\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0120\0\u0f54"+
    "\0\u0f78\0\u0f9c\0\u0fc0\0\u0120\0\u0fe4\0\u1008\0\u102c\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\6\1\10\1\11\1\12\2\11"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\11\1\20"+
    "\3\11\1\21\1\11\1\22\1\11\1\23\4\11\3\24"+
    "\1\25\1\11\1\26\1\27\1\30\1\6\1\7\1\6"+
    "\33\30\1\31\4\30\1\32\1\33\1\34\1\33\37\32"+
    "\1\35\1\36\1\6\1\7\1\6\32\36\1\35\5\36"+
    "\45\0\1\6\1\0\1\6\43\0\1\37\44\0\1\11"+
    "\1\40\16\11\1\0\10\11\3\0\2\11\6\0\20\11"+
    "\1\0\10\11\3\0\2\11\6\0\6\11\1\41\11\11"+
    "\1\0\10\11\3\0\2\11\6\0\14\11\1\42\3\11"+
    "\1\0\2\11\1\43\5\11\3\0\2\11\6\0\4\11"+
    "\1\44\1\11\1\45\5\11\1\46\3\11\1\0\10\11"+
    "\3\0\2\11\6\0\1\47\11\11\1\50\5\11\1\0"+
    "\10\11\3\0\2\11\6\0\10\11\1\51\7\11\1\0"+
    "\10\11\3\0\2\11\6\0\10\11\1\52\7\11\1\0"+
    "\10\11\3\0\2\11\6\0\10\11\1\53\4\11\1\54"+
    "\1\55\1\11\1\0\10\11\3\0\2\11\27\0\1\56"+
    "\22\0\3\11\1\57\14\11\1\0\10\11\3\0\2\11"+
    "\6\0\1\60\13\11\1\61\3\11\1\0\10\11\3\0"+
    "\2\11\6\0\20\11\1\0\10\11\3\0\1\25\1\11"+
    "\41\0\1\62\46\0\1\63\1\0\43\32\1\0\1\32"+
    "\1\33\1\32\1\33\37\32\1\0\3\32\1\64\37\32"+
    "\1\0\1\36\3\0\32\36\1\0\5\36\4\0\2\11"+
    "\1\65\7\11\1\66\5\11\1\0\10\11\3\0\2\11"+
    "\6\0\7\11\1\67\10\11\1\0\10\11\3\0\2\11"+
    "\6\0\15\11\1\70\2\11\1\0\10\11\3\0\2\11"+
    "\6\0\1\71\3\11\1\72\13\11\1\0\10\11\3\0"+
    "\2\11\6\0\3\11\1\73\14\11\1\0\10\11\3\0"+
    "\2\11\6\0\5\11\1\74\12\11\1\0\10\11\3\0"+
    "\2\11\6\0\20\11\1\0\5\11\1\75\2\11\3\0"+
    "\2\11\6\0\16\11\1\76\1\11\1\0\10\11\3\0"+
    "\2\11\6\0\6\11\1\77\11\11\1\0\10\11\3\0"+
    "\2\11\6\0\12\11\1\100\5\11\1\0\10\11\3\0"+
    "\2\11\6\0\14\11\1\101\3\11\1\0\10\11\3\0"+
    "\2\11\6\0\14\11\1\102\3\11\1\0\10\11\3\0"+
    "\2\11\6\0\5\11\1\103\12\11\1\0\10\11\3\0"+
    "\2\11\6\0\17\11\1\104\1\0\10\11\3\0\2\11"+
    "\17\0\1\105\32\0\1\106\17\11\1\0\10\11\3\0"+
    "\2\11\6\0\16\11\1\107\1\11\1\0\10\11\3\0"+
    "\2\11\6\0\7\11\1\110\10\11\1\0\10\11\3\0"+
    "\2\11\41\0\1\111\10\0\3\11\1\112\14\11\1\0"+
    "\10\11\3\0\2\11\6\0\20\11\1\0\5\11\1\113"+
    "\2\11\3\0\2\11\6\0\10\11\1\114\7\11\1\0"+
    "\10\11\3\0\2\11\6\0\5\11\1\115\12\11\1\0"+
    "\10\11\3\0\2\11\6\0\16\11\1\116\1\11\1\0"+
    "\10\11\3\0\2\11\6\0\3\11\1\117\14\11\1\0"+
    "\10\11\3\0\2\11\6\0\20\11\1\0\3\11\1\120"+
    "\4\11\3\0\2\11\6\0\5\11\1\121\12\11\1\0"+
    "\10\11\3\0\2\11\6\0\1\122\17\11\1\0\10\11"+
    "\3\0\2\11\6\0\20\11\1\0\4\11\1\123\3\11"+
    "\3\0\2\11\6\0\16\11\1\124\1\11\1\0\10\11"+
    "\3\0\2\11\6\0\13\11\1\125\4\11\1\0\10\11"+
    "\3\0\2\11\6\0\4\11\1\126\13\11\1\0\10\11"+
    "\3\0\2\11\6\0\1\11\1\127\16\11\1\0\10\11"+
    "\3\0\2\11\6\0\14\11\1\130\3\11\1\0\10\11"+
    "\3\0\2\11\6\0\20\11\1\0\1\131\7\11\3\0"+
    "\2\11\12\0\1\132\37\0\17\11\1\133\1\0\10\11"+
    "\3\0\2\11\6\0\17\11\1\134\1\0\10\11\3\0"+
    "\2\11\6\0\4\11\1\135\13\11\1\0\10\11\3\0"+
    "\2\11\6\0\14\11\1\136\3\11\1\0\10\11\3\0"+
    "\2\11\6\0\1\137\17\11\1\0\10\11\3\0\2\11"+
    "\6\0\20\11\1\0\6\11\1\140\1\11\3\0\2\11"+
    "\6\0\20\11\1\0\4\11\1\141\3\11\3\0\2\11"+
    "\6\0\20\11\1\0\3\11\1\142\4\11\3\0\2\11"+
    "\6\0\13\11\1\143\4\11\1\0\10\11\3\0\2\11"+
    "\6\0\3\11\1\144\14\11\1\0\10\11\3\0\2\11"+
    "\6\0\16\11\1\145\1\11\1\0\10\11\3\0\2\11"+
    "\6\0\11\11\1\146\6\11\1\0\10\11\3\0\2\11"+
    "\6\0\13\11\1\147\4\11\1\0\10\11\3\0\2\11"+
    "\6\0\5\11\1\150\12\11\1\0\10\11\3\0\2\11"+
    "\6\0\14\11\1\151\3\11\1\0\10\11\3\0\2\11"+
    "\6\0\16\11\1\152\1\11\1\0\10\11\3\0\2\11"+
    "\6\0\5\11\1\153\12\11\1\0\10\11\3\0\2\11"+
    "\6\0\1\154\43\0\3\11\1\155\14\11\1\0\10\11"+
    "\3\0\2\11\6\0\5\11\1\156\12\11\1\0\10\11"+
    "\3\0\2\11\6\0\11\11\1\157\6\11\1\0\10\11"+
    "\3\0\2\11\6\0\3\11\1\160\14\11\1\0\10\11"+
    "\3\0\2\11\6\0\13\11\1\161\4\11\1\0\10\11"+
    "\3\0\2\11\6\0\14\11\1\162\3\11\1\0\10\11"+
    "\3\0\2\11\6\0\16\11\1\163\1\11\1\0\10\11"+
    "\3\0\2\11\6\0\20\11\1\0\1\164\7\11\3\0"+
    "\2\11\6\0\20\11\1\0\2\11\1\165\5\11\3\0"+
    "\2\11\6\0\20\11\1\0\7\11\1\166\3\0\2\11"+
    "\6\0\16\11\1\167\1\11\1\0\10\11\3\0\2\11"+
    "\6\0\17\11\1\170\1\0\10\11\3\0\2\11\6\0"+
    "\14\11\1\171\3\11\1\0\10\11\3\0\2\11\10\0"+
    "\1\172\41\0\20\11\1\0\3\11\1\173\4\11\3\0"+
    "\2\11\6\0\15\11\1\174\2\11\1\0\10\11\3\0"+
    "\2\11\6\0\4\11\1\175\13\11\1\0\10\11\3\0"+
    "\2\11\6\0\5\11\1\176\12\11\1\0\10\11\3\0"+
    "\2\11\6\0\1\177\17\11\1\0\10\11\3\0\2\11"+
    "\6\0\5\11\1\200\12\11\1\0\10\11\3\0\2\11"+
    "\6\0\13\11\1\201\4\11\1\0\10\11\3\0\2\11"+
    "\6\0\2\11\1\202\15\11\1\0\10\11\3\0\2\11"+
    "\13\0\1\203\36\0\14\11\1\204\3\11\1\0\10\11"+
    "\3\0\2\11\6\0\12\11\1\205\5\11\1\0\10\11"+
    "\3\0\2\11\27\0\1\206\22\0\2\11\1\207\15\11"+
    "\1\0\10\11\3\0\2\11\6\0\10\11\1\210\7\11"+
    "\1\0\10\11\3\0\2\11\22\0\1\211\27\0\3\11"+
    "\1\212\14\11\1\0\10\11\3\0\2\11\12\0\1\213"+
    "\37\0\20\11\1\0\5\11\1\214\2\11\3\0\2\11"+
    "\30\0\1\215\21\0\1\216\54\0\1\217\46\0\1\220"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\16\1\1\11\2\1\2\11\4\1"+
    "\1\11\1\1\1\11\16\1\1\0\3\1\1\0\1\11"+
    "\21\1\1\0\3\1\1\11\20\1\1\0\21\1\1\0"+
    "\15\1\1\0\10\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Parser yyparser;

	public Yylex (java.io.Reader r, Parser yyparser)
	{
		this(r);
		this.yyparser = yyparser;
		yyline = 1;
	}

	public int getLine()
	{
		return yyline;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return Parser.ELEMENT;
          }
        case 32: break;
        case 9: 
          { yybegin(YYINITIAL); return (int) yycharat(0);
          }
        case 33: break;
        case 10: 
          { yybegin(YYINITIAL); return Parser.JAVADOCEND;
          }
        case 34: break;
        case 5: 
          { yyparser.yylval = new ParserVal(yytext());
						  return Parser.IDENTIFIER;
          }
        case 35: break;
        case 30: 
          { return Parser.ALERTDIALOG;
          }
        case 36: break;
        case 15: 
          { return Parser.IMAGE;
          }
        case 37: break;
        case 7: 
          { return Parser.NUMBER;
          }
        case 38: break;
        case 17: 
          { return Parser.CLASS;
          }
        case 39: break;
        case 27: 
          { return Parser.EXTENDS;
          }
        case 40: break;
        case 6: 
          { return (int) yycharat(0);
          }
        case 41: break;
        case 29: 
          { return Parser.BEGINSTEP;
          }
        case 42: break;
        case 18: 
          { yybegin(IMPORTSTATE); return Parser.IMPORT;
          }
        case 43: break;
        case 19: 
          { return Parser.PUBLIC;
          }
        case 44: break;
        case 2: 
          { yyparser.yylval = new ParserVal(yytext());
								 	  return Parser.ANY;
          }
        case 45: break;
        case 22: 
          { return Parser.LAUNCH;
          }
        case 46: break;
        case 20: 
          { return Parser.THROWS;
          }
        case 47: break;
        case 31: 
          { yybegin(IMPORTSTATE); return Parser.SCRIPTSERVICE;
          }
        case 48: break;
        case 12: 
          { yybegin(JAVADOCSTATE); return Parser.JAVADOCSTART;
          }
        case 49: break;
        case 14: 
          { return Parser.VOID;
          }
        case 50: break;
        case 25: 
          { return Parser.BROWSER;
          }
        case 51: break;
        case 13: 
          { return Parser.LINK;
          }
        case 52: break;
        case 16: 
          { return Parser.THINK;
          }
        case 53: break;
        case 21: 
          { return Parser.BUTTON;
          }
        case 54: break;
        case 24: 
          { return Parser.TEXTBOX;
          }
        case 55: break;
        case 8: 
          { yybegin(STRINGSTATE); return (int) yycharat(0);
          }
        case 56: break;
        case 23: 
          { return Parser.WINDOW;
          }
        case 57: break;
        case 3: 
          { return Parser.UNKNOWN;
          }
        case 58: break;
        case 1: 
          { yyparser.yylval = new ParserVal(yytext());
						  return Parser.ANY;
          }
        case 59: break;
        case 11: 
          { return Parser.WEB;
          }
        case 60: break;
        case 28: 
          { return Parser.ENDSTEP;
          }
        case 61: break;
        case 4: 
          { 
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
